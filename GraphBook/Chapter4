
import org.apache.spark.SparkContext
import org.apache.spark.SparkContext._
import org.apache.spark.SparkConf
import org.apache.spark.graphx._
import org.apache.spark.rdd.RDD

val actors : RDD[(VertexId,String)] = sc.parallelize(List( (1L,"George Cloney"),(2L, "Julia Stiles"),
(3L, "Will Smith"), (4L, "Matt Damon"),(5L, "Salma Hayek")))

val movies: RDD[Edge[String]] = sc.parallelize(List(
Edge(1L,4L,"Ocean's Eleven"),Edge(2L, 4L, "Bourne Ultimatum"),Edge(3L, 5L, "Wild Wild West"),
Edge(1L, 5L, "From Dusk Till Dawn"),Edge(3L, 4L, "The Legend of Bagger Vance")))

val movieGraph = Graph(actors,movies)

//graph.triplets trae ( vertices1, vertice2 ,edge) o trae los edfes
movieGraph.triplets.take(1)

//recorrer los triplets or edges
movieGraph.triplets.foreach(t => println(t.srcAttr + " & " + t.dstAttr + " appeared in " + t.attr))

case class Biography(birthname: String , hometown:String)

val bio: RDD[(VertexId, Biography)] = sc.parallelize(List(
(2, Biography("Julia O'Hara Stiles", "NY City, NY, USA")),
(3, Biography("Willard Christopher Smith Jr.", "Philadelphia, PA,USA")),
(4, Biography("Matthew Paige Damon", "Boston, MA, USA")),
(5, Biography("Salma Valgarma Hayek-Jimenez", "Coatzacoalcos, Veracruz,Mexico")),
(6, Biography("José Antonio Domínguez Banderas", "Málaga, Andalucía,Spain")),
(7, Biography("Paul William Walker IV", "Glendale, CA, USA"))
))

def appendHometown(id: VertexId, name: String, bio: Biography): String = name + ":"+ bio.hometown

//join vertivrd moviegraph to bio(vertex rdd)
val movieJoinedGraph = movieGraph.joinVertices(bio)(appendHometown)

//outerJoinVertices
val movieOuterJoinedGraph = movieGraph.outerJoinVertices(bio)((_,name, bio) => (name,bio))
movieOuterJoinedGraph.vertices.foreach(println)
//(1,(George Cloney,None))

case class Actor(name: String, birthname: String, hometown:String)

//cambia el attributo del vertice a la clase Actor
val movieOuterJoinedGraph = movieGraph.outerJoinVertices(bio)((_,name, b) => b match {
case Some(bio) => Actor(name, bio.birthname, bio.hometown)
case None => Actor(name, "", "")
})

movieOuterJoinedGraph.vertices.foreach(println)
//(1,Actor(George Cloney,,))


val actors = movieGraph.vertices

//vamos a utilizar leftJoin solo en vertices
actors.leftJoin(bio)((vid, name, b) => b match {
case Some(bio) => name + " is from " + bio.hometown
case None => name + "\'s hometown is unknown"
}).foreach(println)

//how to create a bidirectional graph 
val movies = movieGraph.edges
val bidirectedGraph = Graph(actors, movies union movies.reverse)


///////Example from food network
//how to create a bipartite graph
trait FNNode
case class Ingredient(name: String, category: String) extends FNNode 
case class Compound(val name: String, cas: String) extends FNNode
        
// Load ingredient nodes
val ingredients: RDD[(VertexId, FNNode)] = sc.textFile("./data/Food_network/ingr_info.tsv").
filter(! _.startsWith("#")).map {line =>
val row = line split '\t'
(row(0).toInt, Ingredient(row(1), row(2)))
}

val compounds: RDD[(VertexId,FNNode)] = sc.textFile("./data/Food_network/comp_info.tsv").
filter(! _.startsWith("#")).map{ line =>
val row = line split '\t'
(row(0).toInt,Compound(row(1), row(2)))
}

//load edges
val links: RDD[Edge[Int]] = sc.textFile("./data/Food_network/ingr_comp.tsv").
filter(! _.startsWith("#")).map {line =>
val row = line split '\t'
Edge(row(0).toInt, 10000L + row(1).toInt, 1)
}

// Ingredient-compound network
val nodes = ingredients ++ compounds
val foodNetwork = Graph(nodes, links)

//returns (compound id, Array[ingredient id])
val similarIngr: RDD[(VertexId, Array[VertexId])] = foodNetwork.collectNeighborIds(EdgeDirection.In)

//function pairIngredients that takes one such tuple of (compoundid, Array[ingredient id]) and creates an edge between every pair of ingredients
//in the array
def pairIngredients(ingPerComp: (VertexId, Array[VertexId])): Array[Edge[Int]] = for {
x <- ingPerComp._2
y <- ingPerComp._2
if x != y
} yield Edge(x,y,1)

val flavorPairRDD: RDD[Edge[Int]] = similarIngr flatMap pairIngredients

//create new graph with ingredients pairs
val flavorNetwork = Graph(ingredients, flavorPairRDD).cache

//Notice that duplicate edges are possible when a pair of ingredients share more than one compound.
//so we are going to group edges
val flavorWeightedNetwork = flavorNetwork.partitionBy(PartitionStrategy.EdgePartition2D).
groupEdges((x,y) => x+y) //sum the property of the edge
//*
groupEdges requires the graph to be repartitioned because
it assumes that identical edges will be co-located on the
same partition. Thus, you must call partitionBy prior to
grouping the edges.
*//

//let's print the 20 pairs of ingredients that share the most compounds
flavorWeightedNetwork.triplets.sortBy(t => t.attr, false).take(20).
foreach(println)








