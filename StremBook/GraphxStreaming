
import org.apache.spark.SparkConf
import org.apache.spark.streaming._
import org.apache.spark.streaming.flume._
import org.apache.spark.storage.StorageLevel
import org.apache.spark.rdd._
import org.apache.spark.streaming.dstream._
import org.apache.spark.streaming.Duration
import java.net.InetSocketAddress
import java.io.ObjectOutputStream
import java.io.ObjectOutput
import java.io.ByteArrayOutputStream
import org.apache.spark.graphx._
import scala.util.Random
import scala.collection.mutable.Set


val streamCtx = new StreamingContext(sc, Seconds(10))

val stream = FlumeUtils.createPollingStream(streamCtx, "10.0.2.15", 4951, StorageLevel.MEMORY_ONLY_SER_2)

val newDstream = stream.window(Seconds(40),Seconds(20))

//NO SE UTILIZA EL JAR PARA LEER LOS apache access log lanza error
//en cambio se hacen los metodos directos
val PATTERN = """^(\S+) (\S+) (\S+) \[([\w:/]+\s[+\-]\d{4})\] "(\S+) (\S+) (\S+)" (\d{3}) (\d+)""".r

def createDataMap(m: scala.util.matching.Regex.Match): Map[String, String] = {
      return Map[String, String](("IP" -> m.group(1)),("client" -> m.group(2)),
      ("user" -> m.group(3)),("date" -> m.group(4)),("method" -> m.group(5)),
      ("request" -> m.group(6)), ("protocol" -> m.group(7)),("respCode" -> m.group(8)),
       ("size" -> m.group(9)))

  }

  def parseLogLine(log: String): Map[String, String] = {
    val res = PATTERN.findFirstMatchIn(log)
    if (res.isEmpty) {
      throw new RuntimeException("Cannot parse log line: " + log)
    }
    val m = res.get
    
    createDataMap(m);
    
  }


def transformIntoGraph(eventArr: Array[SparkFlumeEvent]): Tuple2[Set[(VertexId, (String))],Set[Edge[String]]] = {
    
    println("Start Transformation........")
    //Defining mutable Sets for holding the Vertices and
    //Edges
    val verticesSet: scala.collection.mutable.
    Set[(VertexId,String)] = scala.collection.mutable.Set()
    val edgesSet: scala.collection.mutable.
    Set[Edge[String]] = scala.collection.mutable.Set()
    //Creating Map of IP and Vertices ID,
    //so that we create Edges to the same IP
    var ipMap:Map[String,Long] = Map()
    
    //Looping over the Array of Flume Events
    for(event<-eventArr){
      //Get the Line of Log and Transform into
      //Attribute Map
      val eventAttrMap = parseLogLine(new String(event.event.getBody().array()))
      //Using Random function for defining Unique Vertices
      //ID's
      //Creating Vertices for IP
      //Creating new or Getting existing VertexID for
      //IP coming from Events
      val ip_verticeID:Long =
      if(ipMap.contains(eventAttrMap.get("IP").get)){
        ipMap.get(eventAttrMap.get("IP").get).get
      }
      else{
        //Using Random function for defining Unique
        //Vertex ID's
        val id = Random.nextLong()
        //Add to the Map
        ipMap+= (eventAttrMap.get("IP").get -> id)
        //Return the Value
        id
        }
      
      verticesSet+=((ip_verticeID,"IP="+eventAttrMap.get("IP")))
      //Creating Vertex for Request
      val request_verticeID = Random.nextLong()
      verticesSet+=((request_verticeID,"Request="+eventAttrMap.get("request")))
      //Creating Vertice for Date
      val date_verticeID = Random.nextLong()
      verticesSet+=((date_verticeID,"Date="+eventAttrMap.get("date")))
      //Creating Vertice for Method
      val method_verticeID = Random.nextLong()
      verticesSet+=((method_verticeID,"Method="+eventAttrMap.get("method")))
      //Creating Vertice for Response Code
      val respCode_verticeID = Random.nextLong()
      verticesSet+=((respCode_verticeID,"ResponseCode="+eventAttrMap.get("respCode")))
      
      //Defining Edges. All parameters are
      //in relation to the User IP
      edgesSet.+=(Edge(ip_verticeID,request_verticeID,"Request")).+= (Edge(ip_verticeID,date_verticeID,"date"))
      edgesSet.+=(Edge(ip_verticeID,method_verticeID,"methodType")).+=(Edge(ip_verticeID,respCode_verticeID,"responseCode"))
      }
      println("End Transformation........")
      //Finally Return the Tuple of 2 Set containing Vertices and Edges
      return (verticesSet,edgesSet)
    
  }

val graphStream = newDstream.foreachRDD { x =>
    //Invoke utility Method for Transforming Events into Graphs Vertices and Edges
    //Wrapped in a Mutable Seq
    val tuple = transformIntoGraph(x.collect())
    println("Creating Graphs Now..................")
    //Define Vertices
    val vertices:RDD[(VertexId, (String))] =sc.parallelize(tuple._1.toSeq)
    //Define Edges
    val edges:RDD[Edge[String]] = sc.parallelize(tuple._2.toSeq)
    //Create or Initialize Graph
    val graph = Graph(vertices,edges)
    //Print total number of Vertices and Edges in the Graph
    println("Total vertices = " + graph.vertices.count()+", Total Edges = "+graph.edges.count())
    //Printing All Vertices in the Graph
    graph.vertices.collect().iterator.foreach(f=>println("Vertex-ID = "+f._1+",Vertex-Name = "+f._2))
    //Printing Requests from
  
  }
    

streamCtx.start()


